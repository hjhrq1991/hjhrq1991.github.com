<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猪生-秋仔</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-23T09:02:42.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 7.0 Nougat 的最终版发布</title>
    <link href="http://yoursite.com/2016/08/23/Nougat/"/>
    <id>http://yoursite.com/2016/08/23/Nougat/</id>
    <published>2016-08-23T02:06:32.000Z</published>
    <updated>2016-08-23T09:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:center"><br><img src="/img/Nougat.png" height="80%" width="80%"><br></p><br>今天 Google 宣布推出 Android 7.0 Nougat 的最终版，Nexus 设备将第一时间获得更新。同时 7.0 源码也已提交给 Android Open Source Project (AOSP) ，这意味着整个 Android 生态系统获得了最新 Android 系统。<br><br>### 设备升级<br>接下来几周 Nexus 6, Nexus 5X, Nexus 6P, Nexus 9, Nexus Player, Pixel C, and General Mobile 4G (Android One) 将获得 Android 7.0 的 OTA 升级。在此之前已加入 Android Beta 计划正在使用 7.0 开发者预览版的设备也将获得最终版升级。<br><p style="text-align:center"><br><img src="/img/Nougat2.png" height="80%" width="80%"><br></p>

<p>除了以上 Nexus 设备，LG V20 将成为第一款搭载 Android 7.0 Nougat 系统的新手机。随着新系统的正式发布，很快更多搭载新系统的手机也将陆续推出。</p>
<h3 id="Android-7-0-新功能回顾"><a href="#Android-7-0-新功能回顾" class="headerlink" title="Android 7.0 新功能回顾"></a>Android 7.0 新功能回顾</h3><p>Android 7.0 包含 250 多项主要特性，下面简要介绍一些功能亮点。</p>
<p style="text-align:center"><br><img src="/img/Nougat3.png" height="80%" width="80%"><br></p>

<p><b>更多 emoji 表情：</b>系统内置 1500+ emoji 符号，包括新加入的 72 个。</p>
<p><b>自定义快速设置：</b>新系统允许你修改系统通知栏的快速设置功能，包括是添加删除以及位置的调整。</p>
<p><b>多区域支持：</b>设置多种适合自己的语言区域，系统和应用可以更好地体现这点。</p>
<p></p><p style="text-align:center"><br><img src="/img/Nougat4.png" height="80%" width="80%"><br></p><p></p>
<p><b>多窗口支持：</b>上下或左右同时看到两个应用。</p>
<p><b>电池优化：</b>Doze 模式更进一步，更省电。</p>
<p><b>Data Saver：</b>开启 Data Saver 后，后台应用将无法使用移动网络。</p>
<p><b>通知分组：</b>应用的多条通知信息折叠显示。</p>
<p><b>快速切换应用：</b>双击应用切换按钮即可在最近两个应用之间切换。</p>
<p><b>Daydream：</b>系统各层高度优化的全新 VR 平台，包括手机、头戴设备和控制器，今年晚些时候揭晓。</p>
<p><b>Vulkan API：</b>新的 3D 高性能、跨平台图形 API 。</p>
<p><b>新的 JIT/AOT 编译器 ：</b>改进性能、更快安装、更少存储占用。</p>
<p><b>Direct Reply：</b>通知栏直接回复，而不用打开应用。</p>
<p><b>更多安全特性：</b>文件级别的加密、在开机解锁前即可运行的 Direct Boot 功能、借鉴 ChromeOS 的系统平滑升级。</p>
<p>更多 Android 7.0 特性：<a href="https://www.android.com/versions/nougat-7-0/" target="_blank" rel="external">https://www.android.com/versions/nougat-7-0/</a><br>开发者资源：<a href="https://developer.android.com/about/versions/nougat/" target="_blank" rel="external">https://developer.android.com/about/versions/nougat/</a></p>
<p>本文转载自：<a href="http://mp.weixin.qq.com/s?__biz=MzA5MDg3MjczMg==&mid=2652003553&idx=1&sn=2ec1d9941b74172524fdb9f6d1e8d158&scene=25&srcid=0823PcnO93w6hDp2CCExS0Hn#wechat_redirect" target="_blank" rel="external">北京GDG</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-align:center&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/Nougat.png&quot; height=&quot;80%&quot; width=&quot;80%&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;今天 Google 宣布推出 Android 7.0 Nougat 的最终版，Nexu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android-使用JsBridge来优化js与本地的交互</title>
    <link href="http://yoursite.com/2016/08/22/JsBridge/"/>
    <id>http://yoursite.com/2016/08/22/JsBridge/</id>
    <published>2016-08-22T15:11:23.000Z</published>
    <updated>2016-08-23T06:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于<a href="https://github.com/lzyzsd/JsBridge" target="_blank" rel="external">lzyzsd的JsBridge</a> 优化改进而来的Android JsBridge。</p>
<p><a href="https://github.com/hjhrq1991/JsBridge" target="_blank" rel="external">工程传送门</a></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>1.支持自定义桥名；<br>2.修复web页未渲染即进行跳转导致Js桥初始化失败的问题；</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>添加maven依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.hjhrq1991.library&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;jsbridge&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;1.0.5&lt;/version&gt;</div><div class="line">  &lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>添加gradle依赖</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.hjhrq1991.library:jsbridge:1.0.5'</span></div></pre></td></tr></table></figure>
<p>在你的布局上添加BridgeWebView</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.hjhrq1991.library.BridgeWebView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/webView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="使用默认桥名或自定义桥名"><a href="#使用默认桥名或自定义桥名" class="headerlink" title="使用默认桥名或自定义桥名"></a>使用默认桥名或自定义桥名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//description：如需使用自定义桥名，调用以下方法即可，</span></div><div class="line"><span class="comment">// 传空或不调用setCustom方法即使用默认桥名。</span></div><div class="line"><span class="comment">// 默认桥名：WebViewJavascriptBridge</span></div><div class="line">webView.setCustom(<span class="string">"TestJavascriptBridge"</span>);</div></pre></td></tr></table></figure>
<h3 id="Android上使用方法"><a href="#Android上使用方法" class="headerlink" title="Android上使用方法"></a>Android上使用方法</h3><p>注册一个handler方法供Js调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">webView.registerHandler(<span class="string">"initSignNetPay"</span>, <span class="keyword">new</span> BridgeHandler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"回传结果："</span> + data);</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Java里调用Js里的handler方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">webView.callHandler(<span class="string">"click1"</span>, <span class="string">"success"</span>, <span class="keyword">new</span> CallBackFunction() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"回传结果："</span> + data);</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用默认handler方法来进行交互</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.setDefaultHandler(<span class="keyword">new</span> DefaultHandler());</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.send(</div><div class="line">    data, <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="JavaScript上使用方法"><a href="#JavaScript上使用方法" class="headerlink" title="JavaScript上使用方法"></a>JavaScript上使用方法</h3><p>构建桥连接</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> default_data = &#123;</div><div class="line">    error: <span class="string">"1"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> connectMerchantJSBridge = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</div><div class="line">            callback(WebViewJavascriptBridge);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">"WebViewJavascriptBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                callback(WebViewJavascriptBridge);</div><div class="line">            &#125;, <span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cmbMerchantBridge = &#123;</div><div class="line">    initSignNet: <span class="function"><span class="keyword">function</span> (<span class="params">payData,name</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!payData) &#123;</div><div class="line">            payData = default_data;</div><div class="line">        &#125;</div><div class="line">        connectMerchantJSBridge(<span class="function"><span class="keyword">function</span> (<span class="params">bridge</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> bridge === <span class="string">"undefined"</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        bridge.callHandler(name, <span class="built_in">JSON</span>.stringify(payData));</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<p>调用Android上的handler方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">click1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> objData = <span class="keyword">new</span> datas();</div><div class="line">    <span class="keyword">var</span> payData = objData.click1;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        cmbMerchantBridge.initSignNet(payData, <span class="string">"initSignNetPay"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript里注册一个handler方法供Android调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*app native调用本页面方法*/</span></div><div class="line">connectMerchantJSBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</div><div class="line">    bridge.init(<span class="function"><span class="keyword">function</span>(<span class="params">message, responseCallback</span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    bridge.registerHandler(<span class="string">"click1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</div><div class="line">        responseCallback(<span class="string">"receive click1"</span>);</div><div class="line">        <span class="comment">//可以在下面执行操作</span></div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.cmbMerchantBridge = cmbMerchantBridge;</div></pre></td></tr></table></figure>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the terms of the MIT license.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于&lt;a href=&quot;https://github.com/lzyzsd/JsBridge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lzyzsd的JsBridge&lt;/a&gt; 优化改进而来的Android JsBridge。&lt;/p&gt;
&lt;p&gt;&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android开发之nuwa热修复</title>
    <link href="http://yoursite.com/2016/04/21/nuwa/"/>
    <id>http://yoursite.com/2016/04/21/nuwa/</id>
    <published>2016-04-21T07:40:35.000Z</published>
    <updated>2016-08-23T10:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信每个开发者在app版本上线后才发现有一个致命性崩溃的bug时，心中是一万只草泥马在奔跑！<br>每次发现这种bug，都只好立马上个小版本修复。这种体验着实糟糕。<br>那我们能不能动态加载一小部分代码来修复这个bug呢？<br>今天给大家带来了女娲nuwa热修复！</p>
<h3 id="一、什么是热修复？"><a href="#一、什么是热修复？" class="headerlink" title="一、什么是热修复？"></a>一、什么是热修复？</h3><p>热修复补丁（hotfix），又称为patch，指能够修复软件漏洞的一些代码，是一种快速、低成本修复产品软件版本缺陷的方式。<br>具体原理可以查看<a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&mid=400118620&idx=1&sn=b4fdd5055731290eef12ad0d17f39d4a&scene=0#wechat_redirect" target="_blank" rel="external">鹅厂qq空间热修复。</a></p>
<h3 id="二、如何使用？"><a href="#二、如何使用？" class="headerlink" title="二、如何使用？"></a>二、如何使用？</h3><p>从QQ空间终端开发团队的文章中可以总结出要进行热更新只需要满足下面两点就可以了：<br>1.动态加载补丁dex，并将补丁dex插入到dexElements最前面<br>2.要实现热更新，需要热更新的类要防止被打上ISPREVERIFIED标记，关于这个标记，请阅读上面QQ空间团队的文章。<br>对于第一点，实现很简单，通过DexClassLoader对象，将补丁dex对象加载进来，再通过反射将补丁dex插入到dexElements最前面即可。具体可参考谷歌的Multidex的实现。</p>
<p>而对于第二点，关键就是如何防止类被打上ISPREVERIFIED这个标记。</p>
<p>简单来说，就是将所有类的构造函数中，引用另一个hack.dex中的类，这个类叫Hack.class，然后在加载补丁patch.dex前动态加载这个hack.dex，但是有一个类的构造函数中不能引用Hack.class，这个类就是Application类的子类，一旦这个类的构造函数中加入Hack.class这个类，那么程序运行时就会找不到Hack.class这个类，因为还没有被加载。也就是说，一个类直接引用到的类不在同一个dex中即可。这样，就能防止类被打上ISPREVERIFIED标记并能进行热更新。</p>
<p><b>添加Gradle Plugin</b><br>在工程的根build.gradle文件中添加<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">classpath</span> <span class="string">'cn.jiajixin.nuwa:gradle:1.2.2'</span></div></pre></td></tr></table></figure></p>
<p>然后我们的build.gradle文件可能长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:1.2.3&apos;</div><div class="line">        classpath &apos;cn.jiajixin.nuwa:gradle:1.2.2&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><b>添加Nuwa SDK</b></p>
<p>在app的build.gradle中添加依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">"cn.jiajixin.nuwa"</span></div></pre></td></tr></table></figure></p>
<p>然后我们的build.gradle文件可能长这样：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'cn.jiajixin.nuwa:nuwa:1.0.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>【备注】 这边有个坑，2.0版本的Android Studio为了支持Instant Run, 默认使用的Gradle Plugin是2.0.0-alpha2, 如果用此版本，会报错Error:Cannot get property ‘taskDependencies’ on null object，乖乖降低到1.2.3，木有此问题</p>
<p><b>使用Nuwa</b></p>
<p>1.自定义Application,并且在Application类中添加以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.attachBaseContext(base);</div><div class="line">    Nuwa.init(<span class="keyword">this</span>);</div><div class="line">    Nuwa.loadPatch(<span class="keyword">this</span>,<span class="string">"/sdcard/patch.jar"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.运行并安装apk，会在app/build/outputs/目录下自动生成一个叫nuwa的目录：</p>
<p>拷贝此目录到一个指定的目录，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/Documents/nuwa</div></pre></td></tr></table></figure></p>
<p>此apk目前是有bug的apk, 然后我们修复bug, 修复完毕后进入步骤3</p>
<p>3.在修复完bug的code base下执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew clean nuwaDebugPatch -P NuwaDir=/Users/Documents/nuwa</div></pre></td></tr></table></figure></p>
<p>然后在app/build/outputs/nuwa/debug/目录下会自动生成patch.jar文件：</p>
<p>此文件就是我们热部署的补丁文件</p>
<p>4.我们把补丁文件拷贝到sdcard根目录（这边只是为了测试整个hotfix流程， 自己的项目肯定是放在服务器上，我们通过代码自己去下载和存储）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push app/build/outputs/nuwa/debug/patch.jar /sdcard/</div></pre></td></tr></table></figure></p>
<p>5.重新启动app，Bug就热修复完成</p>
<h3 id="三、有哪些坑？"><a href="#三、有哪些坑？" class="headerlink" title="三、有哪些坑？"></a>三、有哪些坑？</h3><p>1.Application类尽可能少引用其他类，以免造成该类被打伤标记无法进行热修复；<br>2.热修复无法修复xml(特别是manifest)、资源，所以如果你的布局或者manifest出错，尽量看看能否在代码里修改，不能的话那就放弃热修复还是使用常规升级修复；<br>3.使用命令生成patch.jar时，有修改的类会连同向下依赖的类一起打包进去，因此打出来包比你想象中大点，如果没有打进去，可能会造成ClassNotFoundException错误；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信每个开发者在app版本上线后才发现有一个致命性崩溃的bug时，心中是一万只草泥马在奔跑！&lt;br&gt;每次发现这种bug，都只好立马上个小版本修复。这种体验着实糟糕。&lt;br&gt;那我们能不能动态加载一小部分代码来修复这个bug呢？&lt;br&gt;今天给大家带来了女娲nuwa热修复！&lt;/p
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="nuwa" scheme="http://yoursite.com/tags/nuwa/"/>
    
      <category term="热修复" scheme="http://yoursite.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android 65K问题之Multidex原理分析及NoClassDefFoundError的解决方法</title>
    <link href="http://yoursite.com/2016/03/29/65K/"/>
    <id>http://yoursite.com/2016/03/29/65K/</id>
    <published>2016-03-29T11:44:32.000Z</published>
    <updated>2016-08-23T02:36:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 65K问题相信困惑了不少人，虽然AS的出来可以通过分dex快速解决65K问题，但是同时也容易因为某些代码没有打包到MainDex里引起NoClassDefFoundError。随着5.0的推出，Android也放出了<a href="http://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">Multidex Support Library</a>来解决这个问题。<br><a href="http://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">Multidex Support Library</a>可以直接分包处理65K问题，并且不会发生NoClassDefFoundError的情况。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1.使用的话，首先添加依赖库：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分包multiDexEnabled必须添加该依赖</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:multidex:1.0.1'</span></div></pre></td></tr></table></figure></p>
<p>2.另外开启Multidex开关：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        minifyEnabled <span class="keyword">false</span></div><div class="line">        <span class="comment">//分包</span></div><div class="line">        multiDexEnabled <span class="keyword">true</span></div><div class="line">        proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.这时候运行的话可能会报java堆内存错误，因此最好添加上：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dexOptions &#123;</div><div class="line">    javaMaxHeapSize <span class="string">"4g"</span> </div><div class="line">    incremental <span class="keyword">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.如果你有自己的Application，则修改一下Application使其继承MultiDexApplication：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">MultiDexApplication</span> </span>&#123;</div><div class="line"></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你的Application很不幸已经继承了其他Application导致无法继承MultiDexApplication的话，那也是可以是，只需要复写该方法并加上该代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.attachBaseContext(base);</div><div class="line">    MultiDex.install(base);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这时候你就可以跑了，具体可以看官方文档，毕竟官方文档里面写得非常清楚。</p>
<p>下面我们主要来说下Multidex的实现方法，以下部分来源：<a href="http://blog.waynell.com/2015/04/19/android-multidex/" target="_blank" rel="external">http://blog.waynell.com/2015/04/19/android-multidex/</a> 的分析。</p>
<h3 id="Multidex的实现原理"><a href="#Multidex的实现原理" class="headerlink" title="Multidex的实现原理"></a>Multidex的实现原理</h3><p>Multidex的实现原理是将class编译进不同的classes.dex文件中，一般情况下，一个APK文件中只包含了一个classes.dex文件。分包之后就存在一个主的classes.dex，多个副的classes2.dex，classes3.dex…</p>
<p>在要启动程序时，Android会先去加载主的classes.dex，然后在程序启动后再去加载其它副的dex。那哪些class应该被编译到主的classes.dex中呢？</p>
<p>先来看下Multidex的编译过程，它由三个不同的gradle task组成:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">collect&#123;variant&#125;MultiDexComponents task</div></pre></td></tr></table></figure></p>
<p>这个task会读取项目的AndroidManifest.xml文件中注册的application、Activity、service、receiver、provider、instrumentation相关类，并将其class文件路径写到文件buidl/intermediates/multi-dex/${variant.dirName}/manifest_keep.txt中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shrink&#123;variant&#125;MultiDexComponents task</div></pre></td></tr></table></figure></p>
<p>这个task会调用ProGuard并根据上一步生成的manifest_keep.txt文件内容去压缩class，剔除没有用到的class，生成一个精简的jar包buidl/intermediates/multi-dex/${variant.dirName}/componentClasses.jar<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create&#123;variant&#125;MainDexClassList task</div></pre></td></tr></table></figure></p>
<p>这个task会根据上一步生成的componentClasses.jar去寻找这里面的各个class文字中依赖的class，比如一个class中有一成员变量X，那么X就是依赖的class，componentClasses.jar中所有的class和依赖的class路径都会被写入到文件buidl/intermediates/multi-dex/${variant.dirName}/maindexlist.txt中，这个文件中的类都会被编译进主的classes.dex中去。（详情可以查看ClassReferenceListBuilder的实现源码）</p>
<h3 id="NoClassDefFoundError"><a href="#NoClassDefFoundError" class="headerlink" title="NoClassDefFoundError"></a>NoClassDefFoundError</h3><p>Multidex固然是好的，不用再为方法数超过65536而苦恼了。但是有时往往会带来意想不到的bug，比如NoClassDefFoundError。之前我就在项目中遇到了这个问题，一启动程序就crash了，看log是由于某个类找不到引起的。</p>
<p>通过上面的分析，我们已经得知Multidex的原理了，所以要解决一启动程序就NoClassDefFoundError的问题只需要确定该类是否正确被编译到主classes.dex中去了，如果没有被编进去的话，只要修改下maindexlist.txt文件，把这个类添加进去即可。由于maindexlist.txt这个文件是每次编译时自动生成的，手动去修改它是没用的，所以我们可以在gradle编译中新加入一个task，在create{variant}MainDexClassList这个task完成之后再去修改maindexlist.txt文件添加丢失的class。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 65K问题相信困惑了不少人，虽然AS的出来可以通过分dex快速解决65K问题，但是同时也容易因为某些代码没有打包到MainDex里引起NoClassDefFoundError。随着5.0的推出，Android也放出了&lt;a href=&quot;http://devel
    
    </summary>
    
    
  </entry>
  
</feed>
