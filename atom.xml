<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猪生-秋仔</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-25T02:21:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>猪生-秋仔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo构建博客篇-添加访问量统计功能</title>
    <link href="http://yoursite.com/2016/08/24/Blog_Hexo_Ananlytics/"/>
    <id>http://yoursite.com/2016/08/24/Blog_Hexo_Ananlytics/</id>
    <published>2016-08-24T11:13:21.000Z</published>
    <updated>2016-08-25T02:21:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Hexo的文章阅读量设置问题，大多数人都是使用不蒜子的代码实现。但是这个方法仅局限于在文章页面显示阅读数，首页是不显示的。</p>
<p>下面介绍如何在首页及文章页面都显示文章的阅读量，显示效果如下：</p>
<p style="text-align:center"><br><img border="1" src="/img/Blog_hexo/hexo_anallytics1.png"><br></p>

<p>网上大多数写的是NexT主题的，本文基于该主题设置方式用于gStyle主题实战后编写。<br>使用该教程时请注意比对自己所使用主题与本文的说明！</p>
<h3 id="配置LeanCloud"><a href="#配置LeanCloud" class="headerlink" title="配置LeanCloud"></a>配置LeanCloud</h3><p><b>注册</b></p>
<p>打开<a href="https://leancloud.cn" target="_blank" rel="external">LeanCloud官网</a>，进入注册页面注册。完成邮箱激活后，点击头像，进入<b>控制台</b>页面，如下：</p>
<p style="text-align:center"><br><img border="1" src="/img/Blog_hexo/hexo_anallytics2.png" height="258px"><br></p>

<p><b>创建新应用</b></p>
<p>创建名称为<b>Counter</b>的Class</p>
<p style="text-align:center"><br><img border="1" src="/img/Blog_hexo/hexo_anallytics3.png" width="60%" height="60%"><br></p>

<p style="text-align:center"><br><img border="1" src="/img/Blog_hexo/hexo_anallytics4.png" width="60%" height="60%"><br></p>

<p><b>修改配置文件</b></p>
<p>编辑网站根目录下的<b>_config.yml</b>文件，添加如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># add post views</div><div class="line">leancloud_visitors:</div><div class="line">enable: true</div><div class="line">app_id: **你的app_id**</div><div class="line">app_key: **你的app_key**</div></pre></td></tr></table></figure></p>
<p>其中，app_id和app_key在你所创建的应用的<b>设置-&gt;应用Key</b>中。</p>
<p><b>Web安全性</b></p>
<p>为了保证应用的统计计数功能仅应用于自己的博客系统，你可以在应用-&gt;设置-&gt;安全中心的Web安全域名中加入自己的博客域名，以保证数据的调用安全。</p>
<h3 id="修改主题文件"><a href="#修改主题文件" class="headerlink" title="修改主题文件"></a>修改主题文件</h3><p>NexT主题常用后缀为<font color="red">.swig</font>格式，小编主题常用<font colr="red">.els</font>格式，后文将以<font color="red">.后缀</font>来表示主题常用格式，实战时请替换为自己所使用主题常用后缀格式！</p>
<p><b>添加lean-analytics.后缀 文件</b></p>
<p>添加<font color="red">lean-analytics</font>文件，在所使用主题目录下的模块工具(NexT为<font color="red">/layout/_scripts</font>路径，gStyle为<font color="red">\layout\partials</font>路径)目录下，新建一个名称为<font color="red">lean-analytics.后缀<table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">&lt;!-- custom analytics part create by xiamo --&gt;</div><div class="line">&lt;script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;AV.initialize("&#123;&#123;theme.leancloud_visitors.app_id&#125;&#125;", "&#123;&#123;theme.leancloud_visitors.app_key&#125;&#125;");&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">function showTime(Counter) &#123;</div><div class="line">  var query = new AV.Query(Counter);</div><div class="line">    $(".leancloud_visitors").each(function() &#123;</div><div class="line">      var url = $(this).attr("id").trim();</div><div class="line">      query.equalTo("url", url);</div><div class="line">      query.find(&#123;</div><div class="line">        success: function(results) &#123;</div><div class="line">          if (results.length == 0) &#123;</div><div class="line">            var content = '0 ' + $(document.getElementById(url)).text();</div><div class="line">            $(document.getElementById(url)).text(content);</div><div class="line">            return;</div><div class="line">          &#125;</div><div class="line">          for (var i = 0; i &lt; results.length; i++) &#123;</div><div class="line">            var object = results[i];</div><div class="line">            var content = object.get('time') + ' ' + $(document.getElementById(url)).text();</div><div class="line">            $(document.getElementById(url)).text(content);</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        error: function(object, error) &#123;</div><div class="line">          console.log("Error: " + error.code + " " + error.message);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addCount(Counter) &#123;</div><div class="line">  var Counter = AV.Object.extend("Counter");</div><div class="line">  url = $(".leancloud_visitors").attr('id').trim();</div><div class="line">  title = $(".leancloud_visitors").attr('data-flag-title').trim();</div><div class="line">  var query = new AV.Query(Counter);</div><div class="line">  query.equalTo("url", url);</div><div class="line">  query.find(&#123;</div><div class="line">    success: function(results) &#123;</div><div class="line">      if (results.length &gt; 0) &#123;</div><div class="line">        var counter = results[0];</div><div class="line">        counter.fetchWhenSave(true);</div><div class="line">        counter.increment("time");</div><div class="line">        counter.save(null, &#123;</div><div class="line">          success: function(counter) &#123;</div><div class="line">            var content =  counter.get('time') + ' ' + $(document.getElementById(url)).text();</div><div class="line">            $(document.getElementById(url)).text(content);</div><div class="line">          &#125;,</div><div class="line">          error: function(counter, error) &#123;</div><div class="line">            console.log('Failed to save Visitor num, with error message: ' + error.message);</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125; else &#123;</div><div class="line">        var newcounter = new Counter();</div><div class="line">        newcounter.set("title", title);</div><div class="line">        newcounter.set("url", url);</div><div class="line">        newcounter.set("time", 1);</div><div class="line">        newcounter.save(null, &#123;</div><div class="line">          success: function(newcounter) &#123;</div><div class="line">            console.log("newcounter.get('time')="+newcounter.get('time'));</div><div class="line">            var content = newcounter.get('time') + ' ' + $(document.getElementById(url)).text();</div><div class="line">            $(document.getElementById(url)).text(content);</div><div class="line">          &#125;,</div><div class="line">          error: function(newcounter, error) &#123;</div><div class="line">            console.log('Failed to create');</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    error: function(error) &#123;</div><div class="line">      console.log('Error:' + error.code + " " + error.message);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">$(function() &#123;</div><div class="line">  var Counter = AV.Object.extend("Counter");</div><div class="line">  if ($('.leancloud_visitors').length == 1) &#123;</div><div class="line">    addCount(Counter);</div><div class="line">  &#125; else if ($('.post-title-link').length &gt; 1) &#123;</div><div class="line">  showTime(Counter);</div><div class="line">  &#125;</div><div class="line">&#125;); </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></font></p>
<p>其中，控制显示的格式的主要为content变量，按自己的需求相应修改即可。</p>
<p><b>添加leancloud.后缀 文件</b></p>
<p>在上述路径下添加<font color="red">leancloud.后缀</font>文件，并添加代码，添加的代码请按照主题常用格式编写。<br>NexT：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.leancloud_visitors.enable %&#125;</div><div class="line">	&amp;nbsp; | &amp;nbsp;</div><div class="line">	&lt;span id=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;class=&quot;leancloud_visitors&quot; data-flag-title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;</div><div class="line">		&amp;nbsp;&#123;&#123;__(&apos;post.visitors&apos;)&#125;&#125;</div><div class="line">	&lt;/span&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
<p>gStyle：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.leancloud_visitors.enable)&#123; %&gt;</div><div class="line">	&lt;span id=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;class=&quot;leancloud_visitors&quot; data-flag-title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;</div><div class="line">		&lt;%- &#123;&#123;__(&apos;post.visitors&apos;)&#125;&#125; %&gt;</div><div class="line">	&lt;/span&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p><b>修改post.后缀 文件</b></p>
<p>NexT在<font color="red">\layout_macro</font>，我的在<font color="red">\layout</font>路径下，编辑<font color="red">post.后缀</font>文件，找到相应的插入位置插入代码：<br>gStyle：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&quot;text-align:center&quot;&gt;</div><div class="line">&lt;img border=&quot;1&quot; src=&quot;/img/Blog_hexo/hexo_anallytics6.png&quot; width=&quot;60%&quot; height=&quot;60%&quot;&gt;&lt;/img&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>NexT：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include &apos;_scripts/leancloud.后缀&apos; %&#125;</div></pre></td></tr></table></figure></p>
<p><b>修改layout.后缀 文件</b></p>
<p>在主题目录下的layout目录下，编辑<font color="red">_layout.后缀</font>文件，在body标签的上方插入代码：</p>
<p>NexT:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.leancloud_visitors.enable %&#125;</div><div class="line">&#123;% include &apos;_scripts/lean-analytics.swig&apos; %&#125;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
<p>gStyle：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.leancloud_visitors.enable)&#123; %&gt;</div><div class="line">&lt;%- partial(&apos;partials/lean-analytics&apos;) %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>修改语言配置文件</p>
<p>如果你的网站使用的是英语，则只需要编辑主题目录下的<font color="red">languages\语言<font>文件，增加post字段如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># post:</div><div class="line">sticky: Sticky</div><div class="line">posted: Posted on</div><div class="line">visitors: Views</div></pre></td></tr></table></figure></font></font></p>
<p>如果网站使用的是中文，则编辑<font color="red">languages\zh.yml</font>文件，相应的增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># post:</div><div class="line">sticky: Sticky</div><div class="line">posted: 发表于</div><div class="line">visitors: 阅读次数</div></pre></td></tr></table></figure></p>
<p>其他语言与之类似，将以上设置成你希望翻译的字段。</p>
<h3 id="增加网站的浏览次数与访客数量统计功能"><a href="#增加网站的浏览次数与访客数量统计功能" class="headerlink" title="增加网站的浏览次数与访客数量统计功能"></a>增加网站的浏览次数与访客数量统计功能</h3><p>网站的浏览次数，即pv；网站的访客数为uv。pv的计算方式是，单个用户连续点击n篇文章，记录n次访问量；uv的计算方式是，单个用户连续点击n篇文章，只记录1次访客数。你可以根据需要添加相应的统计功能。</p>
<p><b>安装busuanzi.js脚本</b></p>
<p>如果你使用的是NexT主题（其他主题类似），打开<font color="red">\layout\partial\footer.后缀</font>，拷贝下面的代码至文件的开头。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><b>给文章添加访问统计</b></p>
<p>编辑<font color="red">\layout\post.后缀</font>，在你想要的位置添加显示代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 阅读量 --&gt;</div><div class="line">&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;人阅读</div></pre></td></tr></table></figure></p>
<p>最终效果图如下：</p>
<p style="text-align:center"><br><img border="1" src="/img/Blog_hexo/hexo_anallytics1.png" height="358px"><br></p>

<p><b>页脚显示统计标签</b></p>
<p>同样编辑<font color="red">\layout\partial\footer.后缀</font></p>
<p>如果你想要显示pv统计量，复制以下代码至你想要放置的位置，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</div><div class="line">     本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p>如果你想要显示uv统计量，复制以下代码至你想要放置的位置，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</div><div class="line">     本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p>最终效果图如下：</p>
<p style="text-align:center"><br><img border="1" src="/img/Blog_hexo/hexo_anallytics5.png" width="60%" height="60%"><br></p>

<p>你可以调整一下具体样式来适应你的主题。希望各位都能一次配置成功！</p>
<p>参考资料：<a href="http://www.jeyzhang.com/hexo-next-add-post-views.html" target="_blank" rel="external">http://www.jeyzhang.com/hexo-next-add-post-views.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Hexo的文章阅读量设置问题，大多数人都是使用不蒜子的代码实现。但是这个方法仅局限于在文章页面显示阅读数，首页是不显示的。&lt;/p&gt;
&lt;p&gt;下面介绍如何在首页及文章页面都显示文章的阅读量，显示效果如下：&lt;/p&gt;
&lt;p style=&quot;text-align:center&quot;&gt;&lt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="访问量" scheme="http://yoursite.com/tags/%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
    
      <category term="统计" scheme="http://yoursite.com/tags/%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Android 7.0 Nougat 的最终版发布</title>
    <link href="http://yoursite.com/2016/08/23/Nougat/"/>
    <id>http://yoursite.com/2016/08/23/Nougat/</id>
    <published>2016-08-23T02:06:32.000Z</published>
    <updated>2016-08-25T02:21:49.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:center"><br><img border="1" src="/img/Nougat/Nougat.png" width="60%" height="60%"><br></p><br>今天 Google 宣布推出 Android 7.0 Nougat 的最终版，Nexus 设备将第一时间获得更新。同时 7.0 源码也已提交给 Android Open Source Project (AOSP) ，这意味着整个 Android 生态系统获得了最新 Android 系统。<br><br>### 设备升级<br>接下来几周 Nexus 6, Nexus 5X, Nexus 6P, Nexus 9, Nexus Player, Pixel C, and General Mobile 4G (Android One) 将获得 Android 7.0 的 OTA 升级。在此之前已加入 Android Beta 计划正在使用 7.0 开发者预览版的设备也将获得最终版升级。<br><p style="text-align:center"><br><img border="1" src="/img/Nougat/Nougat2.png" width="60%" height="60%"><br></p>

<p>除了以上 Nexus 设备，LG V20 将成为第一款搭载 Android 7.0 Nougat 系统的新手机。随着新系统的正式发布，很快更多搭载新系统的手机也将陆续推出。</p>
<h3 id="Android-7-0-新功能回顾"><a href="#Android-7-0-新功能回顾" class="headerlink" title="Android 7.0 新功能回顾"></a>Android 7.0 新功能回顾</h3><p>Android 7.0 包含 250 多项主要特性，下面简要介绍一些功能亮点。</p>
<p style="text-align:center"><br><img border="1" src="/img/Nougat/Nougat3.png" width="60%" height="60%"><br></p>

<p><b>更多 emoji 表情：</b>系统内置 1500+ emoji 符号，包括新加入的 72 个。</p>
<p><b>自定义快速设置：</b>新系统允许你修改系统通知栏的快速设置功能，包括是添加删除以及位置的调整。</p>
<p><b>多区域支持：</b>设置多种适合自己的语言区域，系统和应用可以更好地体现这点。</p>
<p></p><p style="text-align:center"><br><img border="1" src="/img/Nougat/Nougat4.png" width="60%" height="60%"><br></p><p></p>
<p><b>多窗口支持：</b>上下或左右同时看到两个应用。</p>
<p><b>电池优化：</b>Doze 模式更进一步，更省电。</p>
<p><b>Data Saver：</b>开启 Data Saver 后，后台应用将无法使用移动网络。</p>
<p><b>通知分组：</b>应用的多条通知信息折叠显示。</p>
<p><b>快速切换应用：</b>双击应用切换按钮即可在最近两个应用之间切换。</p>
<p><b>Daydream：</b>系统各层高度优化的全新 VR 平台，包括手机、头戴设备和控制器，今年晚些时候揭晓。</p>
<p><b>Vulkan API：</b>新的 3D 高性能、跨平台图形 API 。</p>
<p><b>新的 JIT/AOT 编译器 ：</b>改进性能、更快安装、更少存储占用。</p>
<p><b>Direct Reply：</b>通知栏直接回复，而不用打开应用。</p>
<p><b>更多安全特性：</b>文件级别的加密、在开机解锁前即可运行的 Direct Boot 功能、借鉴 ChromeOS 的系统平滑升级。</p>
<p>更多 Android 7.0 特性：<a href="https://www.android.com/versions/nougat-7-0/" target="_blank" rel="external">https://www.android.com/versions/nougat-7-0/</a><br>开发者资源：<a href="https://developer.android.com/about/versions/nougat/" target="_blank" rel="external">https://developer.android.com/about/versions/nougat/</a></p>
<p>本文转载自：<a href="http://mp.weixin.qq.com/s?__biz=MzA5MDg3MjczMg==&mid=2652003553&idx=1&sn=2ec1d9941b74172524fdb9f6d1e8d158&scene=25&srcid=0823PcnO93w6hDp2CCExS0Hn#wechat_redirect" target="_blank" rel="external">北京GDG</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-align:center&quot;&gt;&lt;br&gt;&lt;img border=&quot;1&quot; src=&quot;/img/Nougat/Nougat.png&quot; width=&quot;60%&quot; height=&quot;60%&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;今天 Google 宣布推出 Android 7.
    
    </summary>
    
      <category term="Android资讯" scheme="http://yoursite.com/categories/Android%E8%B5%84%E8%AE%AF/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Nougat" scheme="http://yoursite.com/tags/Nougat/"/>
    
  </entry>
  
  <entry>
    <title>Android-使用JsBridge来优化js与本地的交互</title>
    <link href="http://yoursite.com/2016/08/22/JsBridge/"/>
    <id>http://yoursite.com/2016/08/22/JsBridge/</id>
    <published>2016-08-22T15:11:23.000Z</published>
    <updated>2016-08-25T02:22:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于<a href="https://github.com/lzyzsd/JsBridge" target="_blank" rel="external">lzyzsd的JsBridge</a> 优化改进而来的Android JsBridge。</p>
<p><a href="https://github.com/hjhrq1991/JsBridge" target="_blank" rel="external">工程传送门</a></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>1.支持自定义桥名；<br>2.修复web页未渲染即进行跳转导致Js桥初始化失败的问题；</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>添加maven依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.hjhrq1991.library&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;jsbridge&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;1.0.5&lt;/version&gt;</div><div class="line">  &lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>添加gradle依赖</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.hjhrq1991.library:jsbridge:1.0.5'</span></div></pre></td></tr></table></figure>
<p>在你的布局上添加BridgeWebView</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.hjhrq1991.library.BridgeWebView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/webView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="使用默认桥名或自定义桥名"><a href="#使用默认桥名或自定义桥名" class="headerlink" title="使用默认桥名或自定义桥名"></a>使用默认桥名或自定义桥名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//description：如需使用自定义桥名，调用以下方法即可，</span></div><div class="line"><span class="comment">// 传空或不调用setCustom方法即使用默认桥名。</span></div><div class="line"><span class="comment">// 默认桥名：WebViewJavascriptBridge</span></div><div class="line">webView.setCustom(<span class="string">"TestJavascriptBridge"</span>);</div></pre></td></tr></table></figure>
<h3 id="Android上使用方法"><a href="#Android上使用方法" class="headerlink" title="Android上使用方法"></a>Android上使用方法</h3><p>注册一个handler方法供Js调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">webView.registerHandler(<span class="string">"initSignNetPay"</span>, <span class="keyword">new</span> BridgeHandler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"回传结果："</span> + data);</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Java里调用Js里的handler方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">webView.callHandler(<span class="string">"click1"</span>, <span class="string">"success"</span>, <span class="keyword">new</span> CallBackFunction() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"回传结果："</span> + data);</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用默认handler方法来进行交互</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.setDefaultHandler(<span class="keyword">new</span> DefaultHandler());</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.send(</div><div class="line">    data, <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="JavaScript上使用方法"><a href="#JavaScript上使用方法" class="headerlink" title="JavaScript上使用方法"></a>JavaScript上使用方法</h3><p>构建桥连接</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> default_data = &#123;</div><div class="line">    error: <span class="string">"1"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> connectMerchantJSBridge = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</div><div class="line">            callback(WebViewJavascriptBridge);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">"WebViewJavascriptBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                callback(WebViewJavascriptBridge);</div><div class="line">            &#125;, <span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cmbMerchantBridge = &#123;</div><div class="line">    initSignNet: <span class="function"><span class="keyword">function</span> (<span class="params">payData,name</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!payData) &#123;</div><div class="line">            payData = default_data;</div><div class="line">        &#125;</div><div class="line">        connectMerchantJSBridge(<span class="function"><span class="keyword">function</span> (<span class="params">bridge</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> bridge === <span class="string">"undefined"</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        bridge.callHandler(name, <span class="built_in">JSON</span>.stringify(payData));</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<p>调用Android上的handler方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">click1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> objData = <span class="keyword">new</span> datas();</div><div class="line">    <span class="keyword">var</span> payData = objData.click1;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        cmbMerchantBridge.initSignNet(payData, <span class="string">"initSignNetPay"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript里注册一个handler方法供Android调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*app native调用本页面方法*/</span></div><div class="line">connectMerchantJSBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</div><div class="line">    bridge.init(<span class="function"><span class="keyword">function</span>(<span class="params">message, responseCallback</span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    bridge.registerHandler(<span class="string">"click1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</div><div class="line">        responseCallback(<span class="string">"receive click1"</span>);</div><div class="line">        <span class="comment">//可以在下面执行操作</span></div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.cmbMerchantBridge = cmbMerchantBridge;</div></pre></td></tr></table></figure>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the terms of the MIT license.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于&lt;a href=&quot;https://github.com/lzyzsd/JsBridge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lzyzsd的JsBridge&lt;/a&gt; 优化改进而来的Android JsBridge。&lt;/p&gt;
&lt;p&gt;&lt;a href
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="JsBridge" scheme="http://yoursite.com/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>Android开发之nuwa热修复</title>
    <link href="http://yoursite.com/2016/04/21/nuwa/"/>
    <id>http://yoursite.com/2016/04/21/nuwa/</id>
    <published>2016-04-21T07:40:35.000Z</published>
    <updated>2016-08-25T02:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信每个开发者在app版本上线后才发现有一个致命性崩溃的bug时，心中是一万只草泥马在奔跑！<br>每次发现这种bug，都只好立马上个小版本修复。这种体验着实糟糕。<br>那我们能不能动态加载一小部分代码来修复这个bug呢？<br>今天给大家带来了女娲nuwa热修复！</p>
<h3 id="一、什么是热修复？"><a href="#一、什么是热修复？" class="headerlink" title="一、什么是热修复？"></a>一、什么是热修复？</h3><p>热修复补丁（hotfix），又称为patch，指能够修复软件漏洞的一些代码，是一种快速、低成本修复产品软件版本缺陷的方式。<br>具体原理可以查看<a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&mid=400118620&idx=1&sn=b4fdd5055731290eef12ad0d17f39d4a&scene=0#wechat_redirect" target="_blank" rel="external">鹅厂qq空间热修复。</a></p>
<h3 id="二、如何使用？"><a href="#二、如何使用？" class="headerlink" title="二、如何使用？"></a>二、如何使用？</h3><p>从QQ空间终端开发团队的文章中可以总结出要进行热更新只需要满足下面两点就可以了：<br>1.动态加载补丁dex，并将补丁dex插入到dexElements最前面<br>2.要实现热更新，需要热更新的类要防止被打上ISPREVERIFIED标记，关于这个标记，请阅读上面QQ空间团队的文章。<br>对于第一点，实现很简单，通过DexClassLoader对象，将补丁dex对象加载进来，再通过反射将补丁dex插入到dexElements最前面即可。具体可参考谷歌的Multidex的实现。</p>
<p>而对于第二点，关键就是如何防止类被打上ISPREVERIFIED这个标记。</p>
<p>简单来说，就是将所有类的构造函数中，引用另一个hack.dex中的类，这个类叫Hack.class，然后在加载补丁patch.dex前动态加载这个hack.dex，但是有一个类的构造函数中不能引用Hack.class，这个类就是Application类的子类，一旦这个类的构造函数中加入Hack.class这个类，那么程序运行时就会找不到Hack.class这个类，因为还没有被加载。也就是说，一个类直接引用到的类不在同一个dex中即可。这样，就能防止类被打上ISPREVERIFIED标记并能进行热更新。</p>
<p><b>添加Gradle Plugin</b><br>在工程的根build.gradle文件中添加<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">classpath</span> <span class="string">'cn.jiajixin.nuwa:gradle:1.2.2'</span></div></pre></td></tr></table></figure></p>
<p>然后我们的build.gradle文件可能长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:1.2.3&apos;</div><div class="line">        classpath &apos;cn.jiajixin.nuwa:gradle:1.2.2&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><b>添加Nuwa SDK</b></p>
<p>在app的build.gradle中添加依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">"cn.jiajixin.nuwa"</span></div></pre></td></tr></table></figure></p>
<p>然后我们的build.gradle文件可能长这样：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'cn.jiajixin.nuwa:nuwa:1.0.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>【备注】 这边有个坑，2.0版本的Android Studio为了支持Instant Run, 默认使用的Gradle Plugin是比较高的, 如果使用高版本，会报错Error:Cannot get property ‘taskDependencies’ on null object，乖乖降低到把你的Gradle Plugin版本降到较低版本，我用的是1.2.3，木有此问题</p>
<p><b>使用Nuwa</b></p>
<p>1.自定义Application,并且在Application类中添加以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.attachBaseContext(base);</div><div class="line">    Nuwa.init(<span class="keyword">this</span>);</div><div class="line">    Nuwa.loadPatch(<span class="keyword">this</span>,<span class="string">"/sdcard/patch.jar"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.运行并安装apk，会在app/build/outputs/目录下自动生成一个叫nuwa的目录：</p>
<p>拷贝此目录到一个指定的目录，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/Documents/nuwa</div></pre></td></tr></table></figure></p>
<p>此apk目前是有bug的apk, 然后我们修复bug, 修复完毕后进入步骤3</p>
<p>3.在Terminal工具执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#mac使用./gradlew或gradle，windows使用gradlew</div><div class="line">./gradlew clean nuwaDebugPatch -P NuwaDir=/Users/Documents/nuwa</div></pre></td></tr></table></figure></p>
<p>如果你使用的mac并且无法使用./gradlew，报：Permission denied错误，请执行一次该命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x gradlew</div></pre></td></tr></table></figure></p>
<p>然后在app/build/outputs/nuwa/debug/目录下会自动生成patch.jar文件：</p>
<p>此文件就是我们热部署的补丁文件</p>
<p>4.我们把补丁文件拷贝到sdcard根目录（这边只是为了测试整个hotfix流程， 自己的项目肯定是放在服务器上，我们通过代码自己去下载和存储）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push app/build/outputs/nuwa/debug/patch.jar /sdcard/</div></pre></td></tr></table></figure></p>
<p>5.重新启动app，Bug就热修复完成</p>
<p><b>Tips</b></p>
<p>如果你使用了多渠道配置，以Androidmarket为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">    Androidmarket &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">productFlavors.all &#123; flavor -&gt;</div><div class="line">    flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行第三步的时候命令有些区别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew clean nuwaAndroidmarketDebugPatch -P NuwaDir=/Users/Documents/nuwa</div></pre></td></tr></table></figure></p>
<p>如果打的是Release版本，使用以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew clean nuwaAndroidmarketReleasePatch -P NuwaDir=/Users/Documents/nuwa</div></pre></td></tr></table></figure></p>
<h3 id="三、有哪些坑？"><a href="#三、有哪些坑？" class="headerlink" title="三、有哪些坑？"></a>三、有哪些坑？</h3><p>1.Application类尽可能少引用其他类，以免造成该类被打伤标记无法进行热修复；<br>2.热修复无法修复xml(特别是manifest)、资源，所以如果你的布局或者manifest出错，尽量看看能否在代码里修改，不能的话那就放弃热修复还是使用常规升级修复；<br>3.使用命令生成patch.jar时，有修改的类会连同向下依赖的类一起打包进去，因此打出来包比你想象中大点，如果没有打进去，可能会造成ClassNotFoundException错误；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信每个开发者在app版本上线后才发现有一个致命性崩溃的bug时，心中是一万只草泥马在奔跑！&lt;br&gt;每次发现这种bug，都只好立马上个小版本修复。这种体验着实糟糕。&lt;br&gt;那我们能不能动态加载一小部分代码来修复这个bug呢？&lt;br&gt;今天给大家带来了女娲nuwa热修复！&lt;/p
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="nuwa" scheme="http://yoursite.com/tags/nuwa/"/>
    
      <category term="热修复" scheme="http://yoursite.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android 65K问题之Multidex原理分析及NoClassDefFoundError的解决方法</title>
    <link href="http://yoursite.com/2016/03/29/65K/"/>
    <id>http://yoursite.com/2016/03/29/65K/</id>
    <published>2016-03-29T11:44:32.000Z</published>
    <updated>2016-08-25T02:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 65K问题相信困惑了不少人，虽然AS的出来可以通过分dex快速解决65K问题，但是同时也容易因为某些代码没有打包到MainDex里引起NoClassDefFoundError。随着5.0的推出，Android也放出了<a href="http://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">Multidex Support Library</a>来解决这个问题。<br><a href="http://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">Multidex Support Library</a>可以直接分包处理65K问题，并且不会发生NoClassDefFoundError的情况。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1.使用的话，首先添加依赖库：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分包multiDexEnabled必须添加该依赖</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:multidex:1.0.1'</span></div></pre></td></tr></table></figure></p>
<p>2.另外开启Multidex开关：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        minifyEnabled <span class="keyword">false</span></div><div class="line">        <span class="comment">//分包</span></div><div class="line">        multiDexEnabled <span class="keyword">true</span></div><div class="line">        proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.这时候运行的话可能会报java堆内存错误，因此最好添加上：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dexOptions &#123;</div><div class="line">    javaMaxHeapSize <span class="string">"4g"</span> </div><div class="line">    incremental <span class="keyword">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.如果你有自己的Application，则修改一下Application使其继承MultiDexApplication：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">MultiDexApplication</span> </span>&#123;</div><div class="line"></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你的Application很不幸已经继承了其他Application导致无法继承MultiDexApplication的话，那也是可以是，只需要复写该方法并加上该代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.attachBaseContext(base);</div><div class="line">    MultiDex.install(base);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这时候你就可以跑了，具体可以看官方文档，毕竟官方文档里面写得非常清楚。</p>
<p>下面我们主要来说下Multidex的实现方法，以下部分来源：<a href="http://blog.waynell.com/2015/04/19/android-multidex/" target="_blank" rel="external">http://blog.waynell.com/2015/04/19/android-multidex/</a> 的分析。</p>
<h3 id="Multidex的实现原理"><a href="#Multidex的实现原理" class="headerlink" title="Multidex的实现原理"></a>Multidex的实现原理</h3><p>Multidex的实现原理是将class编译进不同的classes.dex文件中，一般情况下，一个APK文件中只包含了一个classes.dex文件。分包之后就存在一个主的classes.dex，多个副的classes2.dex，classes3.dex…</p>
<p>在要启动程序时，Android会先去加载主的classes.dex，然后在程序启动后再去加载其它副的dex。那哪些class应该被编译到主的classes.dex中呢？</p>
<p>先来看下Multidex的编译过程，它由三个不同的gradle task组成:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">collect&#123;variant&#125;MultiDexComponents task</div></pre></td></tr></table></figure></p>
<p>这个task会读取项目的AndroidManifest.xml文件中注册的application、Activity、service、receiver、provider、instrumentation相关类，并将其class文件路径写到文件buidl/intermediates/multi-dex/${variant.dirName}/manifest_keep.txt中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shrink&#123;variant&#125;MultiDexComponents task</div></pre></td></tr></table></figure></p>
<p>这个task会调用ProGuard并根据上一步生成的manifest_keep.txt文件内容去压缩class，剔除没有用到的class，生成一个精简的jar包buidl/intermediates/multi-dex/${variant.dirName}/componentClasses.jar<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create&#123;variant&#125;MainDexClassList task</div></pre></td></tr></table></figure></p>
<p>这个task会根据上一步生成的componentClasses.jar去寻找这里面的各个class文字中依赖的class，比如一个class中有一成员变量X，那么X就是依赖的class，componentClasses.jar中所有的class和依赖的class路径都会被写入到文件buidl/intermediates/multi-dex/${variant.dirName}/maindexlist.txt中，这个文件中的类都会被编译进主的classes.dex中去。（详情可以查看ClassReferenceListBuilder的实现源码）</p>
<h3 id="NoClassDefFoundError"><a href="#NoClassDefFoundError" class="headerlink" title="NoClassDefFoundError"></a>NoClassDefFoundError</h3><p>Multidex固然是好的，不用再为方法数超过65536而苦恼了。但是有时往往会带来意想不到的bug，比如NoClassDefFoundError。之前我就在项目中遇到了这个问题，一启动程序就crash了，看log是由于某个类找不到引起的。</p>
<p>通过上面的分析，我们已经得知Multidex的原理了，所以要解决一启动程序就NoClassDefFoundError的问题只需要确定该类是否正确被编译到主classes.dex中去了，如果没有被编进去的话，只要修改下maindexlist.txt文件，把这个类添加进去即可。由于maindexlist.txt这个文件是每次编译时自动生成的，手动去修改它是没用的，所以我们可以在gradle编译中新加入一个task，在create{variant}MainDexClassList这个task完成之后再去修改maindexlist.txt文件添加丢失的class。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 65K问题相信困惑了不少人，虽然AS的出来可以通过分dex快速解决65K问题，但是同时也容易因为某些代码没有打包到MainDex里引起NoClassDefFoundError。随着5.0的推出，Android也放出了&lt;a href=&quot;http://devel
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="65k" scheme="http://yoursite.com/tags/65k/"/>
    
      <category term="Multidex" scheme="http://yoursite.com/tags/Multidex/"/>
    
      <category term="NoClassDefFoundError" scheme="http://yoursite.com/tags/NoClassDefFoundError/"/>
    
  </entry>
  
  <entry>
    <title>Android-解决微信等混淆打包提示Can&#39;t process class</title>
    <link href="http://yoursite.com/2015/01/22/process/"/>
    <id>http://yoursite.com/2015/01/22/process/</id>
    <published>2015-01-22T15:34:46.000Z</published>
    <updated>2016-08-25T02:22:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前做项目的时候用到了微信分享和微信支付。起初微信支付没有集成到项目里，没发现什么，打包都正常。后来集成到项目里，发现坑爹了。微信只支持一个功能集成，即只能做微信支付，或者微信分享，不能同时集成两个。因为微信在sdk的处理上出现问题，每个功能有单独的sdk，而且都是实体都是继承同一个超类实现不同方法，因此sdk没法共存。<br>终于，在11月末的时候微信推出了新的集成sdk，把各个功能集成到一起了。之后项目继续在做，所以又没出现什么问题。直到最近，在打包测试时，问题终于来了。混淆打包一直不成功，提示</p>
<p style="text-align:center"><br><img border="1" src="/img/Process/process1.jpeg" width="60%" height="60%"><br></p>

<p>这个问题我在这里就不深究是什么原因，有兴趣的朋友可以加我qq：444563258一起探讨。我们继续讨论如何解决吧。<br>在网上搜索，发现有大神提供了解决思路，于是乎我也尝试自己制作。<br>大神提供的解决思路是更改proguard源码中的ClassConstants.java中ATTR_StackMap属性改为dummy，然后进行重新导出成jar，并把混淆插件所使用的jar替换成导出来的。<br>到proguard官网上下载源码，修改源码中src-&gt;proguard-&gt;classfile中得ClassConstants.java文件</p>
<p style="text-align:center"><br><img border="1" src="/img/Process/process2.jpeg" width="60%" height="60%"><br></p>

<p>把文件中第151行中得ATTR_StackMap属性StackMap修改为dummp。保存，然后就可以开始重新编译为jar做准备了</p>
<p style="text-align:center"><br><img border="1" src="/img/Process/process3.jpeg" width="60%" height="60%"><br></p>

<p>重新编译可以使用多种方式，我这里使用ant进行重新编译，具体我就不多说，可以参考这篇blog，里面有ant的配置和使用<a href="http://glblong.blog.51cto.com/3058613/1536516。" target="_blank" rel="external">http://glblong.blog.51cto.com/3058613/1536516。</a><br>重新编译完后，我们就可以使用了。如果你使用的是eclipse，代码混淆使用的是sdk里的jar。大家可以替换sdk下的tools的groguard.jar(大伙别介意，我用的是mac，所以就没有列表具体路径，只是做个截图供大家参考)</p>
<p style="text-align:center"><br><img border="1" src="/img/Process/process4.jpeg" width="60%" height="60%"><br></p>

<p>如果你使用的是android studio，studio的话，默认会使用它自带的proguard插件，所以替换sdk的jar是无效的，依然会提示这个错误，所以你有两种选择：1.更改你的studio里proguard插件的路径(这个我也不知道哪里改，如果你知道的话请告诉我一声)；2.替换你的studio里的proguard.jar(路径如下图)</p>
<p style="text-align:center"><br><img border="1" src="/img/Process/process5.jpeg" width="60%" height="60%"><br></p>

<p>替换之后重启你的studio，然后重新打包你的项目，你就会很惊喜的看到，终于编译成功了！</p>
<p style="text-align:center"><br><img border="1" src="/img/Process/process6.jpeg" width="60%" height="60%"><br></p>

<p>文后附上我重新编译的proguard下载地址：<a href="http://download.csdn.net/detail/hjhrq1991/8388025" target="_blank" rel="external">点击下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前做项目的时候用到了微信分享和微信支付。起初微信支付没有集成到项目里，没发现什么，打包都正常。后来集成到项目里，发现坑爹了。微信只支持一个功能集成，即只能做微信支付，或者微信分享，不能同时集成两个。因为微信在sdk的处理上出现问题，每个功能有单独的sdk，而且都是实体都是
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="混淆" scheme="http://yoursite.com/tags/%E6%B7%B7%E6%B7%86/"/>
    
      <category term="报错" scheme="http://yoursite.com/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>Android-mac下如何使用adb命令</title>
    <link href="http://yoursite.com/2014/12/25/ADB/"/>
    <id>http://yoursite.com/2014/12/25/ADB/</id>
    <published>2014-12-25T14:34:15.000Z</published>
    <updated>2016-08-25T02:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信在使用mac os X的网友都知道，mac没几个像win上豌豆荚、360助手之类的工具，在mac下做android开发就比较麻烦了，遇到adb中断，或者打包apk，没有工具很难重启adb或者把apk安装到手机上。这时候我们就需要使用adb命令了。<br>可是有些有网友又说，adb用不了，提示：commadb not found</p>
<p style="text-align:center"><br><img border="1" src="/img/ADB/ADB1.png" width="60%" height="60%"><br></p>

<p>其实这很简单，这是因为你没有配置adb的环境变量。不信？大家想想win上配置安卓的环境时是否添加了两个path，一个是sdk的tools文件夹，另一个是platform-tools文件夹。想起来就对了，mac下也需要配置</p>
<p><b>1.首先打开你的终端</b></p>
<p></p><p style="text-align:center"><br><img border="1" src="/img/ADB/ADB2.png" width="80px"><br></p><br><b>2.然后输入以下代码：</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#进去HOME目录：</div><div class="line">echo $HOME</div><div class="line"></div><div class="line">#创建文件：</div><div class="line">touch .bash_profile</div><div class="line"></div><div class="line">#打开文件：</div><div class="line">open -e .bash_profile</div></pre></td></tr></table></figure><p></p>
<p><b>3.这时就会打开你的.bash_profile文件，在文件中输入你的sdk路径：</b><br>export PATH=${PATH}:/Users/hjhrq1991/Downloads/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:/Users/hjhrq1991/Downloads/adt-bundle-mac-x86_64-20140702/sdk/tools</p>
<p></p><p style="text-align:center"><br><img border="1" src="/img/ADB/ADB3.jpeg" width="60%" height="60%"><br></p><br><b>4.输入完后保存并关闭你的文件(关闭即自动保存)</b><p></p>
<p><b>5.然后接着在你的终端上输入以下命令：</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#刷新环境变量</div><div class="line">source .bash_profile</div></pre></td></tr></table></figure></p>
<p></p><p style="text-align:center"><br><img border="1" src="/img/ADB/ADB4.jpeg" width="60%" height="60%"><br></p><br>然后你就可以使用adb命令来测试了，如果还不行，请检测你保存的sdk路径是否正确！<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信在使用mac os X的网友都知道，mac没几个像win上豌豆荚、360助手之类的工具，在mac下做android开发就比较麻烦了，遇到adb中断，或者打包apk，没有工具很难重启adb或者把apk安装到手机上。这时候我们就需要使用adb命令了。&lt;br&gt;可是有些有网友又
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="adb" scheme="http://yoursite.com/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>Android5.0之RecyclerView</title>
    <link href="http://yoursite.com/2014/10/25/recyclerview/"/>
    <id>http://yoursite.com/2014/10/25/recyclerview/</id>
    <published>2014-10-25T03:06:35.000Z</published>
    <updated>2016-08-25T02:22:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇Blog中已经讲到过了RecyclerVIew的特性等等，现在我们开始正式讲讲这个它吧。<br>RecyclerView作为listview的更新版面世，有着他得天独厚的优势：<br>第一点，就是他更完善Recycler机制，比listview的recycler机制还相对完善，可以指定recycler缓冲池中循环利用的view的数量；<br>第二点，recyclerview不再有由自己来管理子布局view了，全部交给layoutmanger管理；<br>第三点，完美解决了循环和滚动的问题，而且支持横向布局；<br>第四点，支持item动画，猿们终于不用自己写很多代码去对item设置动画，懒点可以使用默认动画，想炫点可以自己自定义动画并通过setItemAnimator()方法设置……<br>好了，不多说，优势还有很多，就让猿们自己慢慢挖掘吧。</p>
<p>recyclerview是21新增的widget，想使用的话，需要使用以下最新的support-v7-21包，以及recyclerview的单独支持包。这两个包都可以在最新的SDK中提取出来，使用jar包或者工程都可以。</p>
<p style="text-align:center"><br><img border="1" src="/img/RecyclerView/RecyclerView1.png" width="60%" height="60%"><br></p>

<p>导入包后我们就可以开始使用recyclerview了，在布局文件中使用方法如下。Eclipse中是无法找到的，只能自己手动把android.support.v7.widget.RecyclerView打出来，在AS上可以直接找到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.RecyclerView</div><div class="line">    android:id=&quot;@+id/rvlist&quot;</div><div class="line">    android:layout_below=&quot;@+id/title_bar&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:scrollbars=&quot;none&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>布局有了，item的布局我就不说，下面跟随我的步伐看看代码里怎么使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private void showDate() &#123;</div><div class="line">    // 创建一个线性布局管理器</div><div class="line">    LinearLayoutManager layoutManager = new LinearLayoutManager(this);</div><div class="line">    // 设置垂直布局，目前仅支持LinearLayout(有垂直和横向)</div><div class="line">    layoutManager.setOrientation(LinearLayoutManager.VERTICAL);</div><div class="line">    // 设置缓冲池最大循环使用view数</div><div class="line">    mRecylerView.getRecycledViewPool().setMaxRecycledViews(0, 10);</div><div class="line">    // 设置布局管理器</div><div class="line">    mRecylerView.setLayoutManager(layoutManager);</div><div class="line">    // 创建Adapter，并指定数据集</div><div class="line">    mAdapter = new TestAdaper(this, mList);</div><div class="line">    // 设置Adapter</div><div class="line">    mRecylerView.setAdapter(mAdapter);</div><div class="line">    // 设置默认动画</div><div class="line">    mRecylerView.setItemAnimator(new DefaultItemAnimator());</div><div class="line">    // 还有下面这上三种动画FlipDownItemAnimator, SlideItemAnimator, FromTopItemAnimator</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Adapter的变化更是大，recyclerview的adapter使用viewholder，使用时必须继承RecyclerView.Adapter；在listview中，我们使用getview()来获取item的布局，在这里我们必须使用onCreateViewHolder(ViewGroup parent, int viewtype)来获取布局，其中第二个参数viewtype怎么来的？其实是我们传进来的，如果我们需要使用多布局，则必须复写getItemViewType方法，这个方法没有强制必须复写，但是多布局时必须复写，这是个int返回值得方法，我们将你的布局类型传进去，这样我们就可以得到viewtype。另外，viewholder的使用必须继承RecyclerView.ViewHolder。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line">package com.hjhrq1991.adapter;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.hjhrq1991.bean.TestInfo;</div><div class="line">import com.hjhrq1991.recyclerviewdemo.R;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.support.v7.widget.RecyclerView;</div><div class="line">import android.support.v7.widget.RecyclerView.ViewHolder;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.CheckBox;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.TextView;</div><div class="line">import android.widget.Toast;</div><div class="line"></div><div class="line">public class TestAdaper extends RecyclerView.Adapter&lt;ViewHolder&gt; &#123;</div><div class="line">    private List&lt;TestInfo&gt; mList;</div><div class="line">    private Context context;</div><div class="line"></div><div class="line">    public TestAdaper(Context context, List&lt;TestInfo&gt; mList) &#123;</div><div class="line">        super();</div><div class="line">        this.context = context;</div><div class="line">        this.mList = mList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 内部TextHoler</div><div class="line">     */</div><div class="line">    public class TextHoler extends RecyclerView.ViewHolder &#123;</div><div class="line">        public TextView textView;</div><div class="line"></div><div class="line">        public TextHoler(View view) &#123;</div><div class="line">            super(view);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * iamgeHolder</div><div class="line">     */</div><div class="line">    public class ImageHoler extends RecyclerView.ViewHolder &#123;</div><div class="line">        public TextView textView;</div><div class="line">        public ImageView Imageview;</div><div class="line"></div><div class="line">        public ImageHoler(View view) &#123;</div><div class="line">            super(view);</div><div class="line">            this.textView = (TextView) view.findViewById(R.id.text);</div><div class="line">            this.Imageview = (ImageView) view.findViewById(R.id.image);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 按钮的holder</div><div class="line">     */</div><div class="line">    public class CbHoler extends RecyclerView.ViewHolder &#123;</div><div class="line">        public TextView textView;</div><div class="line">        public ImageView Imageview;</div><div class="line">        public CheckBox checkbox;</div><div class="line"></div><div class="line">        public CbHoler(View view) &#123;</div><div class="line">            super(view);</div><div class="line">            this.textView = (TextView) view.findViewById(R.id.text);</div><div class="line">            this.Imageview = (ImageView) view.findViewById(R.id.image);</div><div class="line">            this.checkbox = (CheckBox) view.findViewById(R.id.checkbox);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">        return mList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取item的类型</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int getItemViewType(int position) &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">        return mList.get(position).getType();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建view</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewtype) &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">        View v = null;</div><div class="line">        ViewHolder holer = null;</div><div class="line">        switch (viewtype) &#123;</div><div class="line">            case TestInfo.TASK_TEXT:</div><div class="line">                v = LayoutInflater.from(parent.getContext()).inflate(</div><div class="line">                    R.layout.item_text_layout, null);</div><div class="line">                holer = new TextHoler(v);</div><div class="line">                break;</div><div class="line">            case TestInfo.TASK_DRAWABLE:</div><div class="line">                v = LayoutInflater.from(parent.getContext()).inflate(</div><div class="line">                    R.layout.item_image_layout, null);</div><div class="line">                holer = new ImageHoler(v);</div><div class="line">                break;</div><div class="line">            case TestInfo.TASK_CHEXKBOX:</div><div class="line">                v = LayoutInflater.from(parent.getContext()).inflate(</div><div class="line">                    R.layout.item_checkbox_layout, null);</div><div class="line">                holer = new CbHoler(v);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return holer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 在这里进行数据的绑定，参数1是onCreateViewHolder创建的viewholder，参数2是你item的位置</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(ViewHolder holder, int position) &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">        switch (getItemViewType(position)) &#123;</div><div class="line">            case TestInfo.TASK_TEXT:</div><div class="line">                TextHoler textholer = (TextHoler) holder;</div><div class="line">                textholer.textView.setText(mList.get(position).getContent());</div><div class="line">                break;</div><div class="line">            case TestInfo.TASK_DRAWABLE:</div><div class="line">                ImageHoler imageHolder = (ImageHoler) holder;</div><div class="line">                imageHolder.textView.setText(mList.get(position).getContent());</div><div class="line">                imageHolder.Imageview.setImageResource(mList.get(position)</div><div class="line">                    .getDrawableurl());</div><div class="line">                break;</div><div class="line">            case TestInfo.TASK_CHEXKBOX:</div><div class="line">                CbHoler cbHoler = (CbHoler) holder;</div><div class="line">                cbHoler.textView.setText(mList.get(position).getContent());</div><div class="line">                cbHoler.Imageview.setImageResource(mList.get(position)</div><div class="line">                    .getDrawableurl());</div><div class="line">                cbHoler.checkbox.setText(mList.get(position).getCbcontent());</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看了这么多代码，估计猿们纷纷表示，click方法呢？怎么没见到onitemclick方法？是的，listview里有onItemClick方法，但是这样容易造成item和item内部控件的点击事件冲突，为了解决这个问题，recyclerview不再提供onitemclick方法。惊恐纳尼，不提供，那怎么破？别担心，onitemclick方法可以在adapter中实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * item点击事件的实现</div><div class="line"> */</div><div class="line">class OnItemClick implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    public OnItemClick() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        Toast.makeText(context, &quot;你点击了item&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * item内部控件点击事件的实现</div><div class="line"> */</div><div class="line">class OnClick implements View.OnClickListener &#123;</div><div class="line">    private int position;</div><div class="line"></div><div class="line">    public OnClick(int position) &#123;</div><div class="line">        this.position = position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        Toast.makeText(context, &quot;你点击了第&quot; + position + &quot;个text&quot;,</div><div class="line">            Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>onItemClick方法在ViewHolder里使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class TextHoler extends RecyclerView.ViewHolder &#123;</div><div class="line">    public TextView textView;</div><div class="line"></div><div class="line">    public TextHoler(View view) &#123;</div><div class="line">        super(view);</div><div class="line">        this.textView = (TextView) view.findViewById(R.id.text);</div><div class="line">        view.setOnClickListener(new OnItemClick());// 这里使用onItemClick方法</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于item内部控件的点击事件在onBindViewHolder方法里实现。<br>除了这种方法可以实现onItemClick事件外，还有其他方法，例如在复写recyclerview源码，扩展他的点击事件方法。我自己还有另一种方法，在adapter里写一个接口，在activity里实现接口并监听接口，这种方法就在我下一篇blog使用recyclerview实现Gallery画廊效果里说吧。</p>
<p style="text-align:center"><br><img border="1" src="/img/RecyclerView/RecyclerView2.jpeg" width="60%" height="60%"><br></p>

<p><a href="http://download.csdn.net/detail/hjhrq1991/8093009" target="_blank" rel="external">demo下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇Blog中已经讲到过了RecyclerVIew的特性等等，现在我们开始正式讲讲这个它吧。&lt;br&gt;RecyclerView作为listview的更新版面世，有着他得天独厚的优势：&lt;br&gt;第一点，就是他更完善Recycler机制，比listview的recycler机制
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://yoursite.com/tags/RecyclerView/"/>
    
  </entry>
  
</feed>
