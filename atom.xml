<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猪生-秋仔</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-23T02:21:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 7.0 Nougat 的最终版发布</title>
    <link href="http://yoursite.com/2016/08/23/Nouga/"/>
    <id>http://yoursite.com/2016/08/23/Nouga/</id>
    <published>2016-08-23T02:06:32.000Z</published>
    <updated>2016-08-23T02:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天 Google 宣布推出 Android 7.0 Nougat 的最终版，Nexus 设备将第一时间获得更新。同时 7.0 源码也已提交给 Android Open Source Project (AOSP) ，这意味着整个 Android 生态系统获得了最新 Android 系统。</p>
<p>设备升级<br>接下来几周 Nexus 6, Nexus 5X, Nexus 6P, Nexus 9, Nexus Player, Pixel C, and General Mobile 4G (Android One) 将获得 Android 7.0 的 OTA 升级。在此之前已加入 Android Beta 计划正在使用 7.0 开发者预览版的设备也将获得最终版升级。</p>
<p>除了以上 Nexus 设备，LG V20 将成为第一款搭载 Android 7.0 Nougat 系统的新手机。随着新系统的正式发布，很快更多搭载新系统的手机也将陆续推出。</p>
<p>Android 7.0 新功能回顾<br>Android 7.0 包含 250 多项主要特性，下面简要介绍一些功能亮点。</p>
<p>更多 emoji 表情：系统内置 1500+ emoji 符号，包括新加入的 72 个。<br>自定义快速设置：新系统允许你修改系统通知栏的快速设置功能，包括是添加删除以及位置的调整。<br>多区域支持：设置多种适合自己的语言区域，系统和应用可以更好地体现这点。</p>
<p>多窗口支持：上下或左右同时看到两个应用。<br>电池优化：Doze 模式更进一步，更省电。<br>Data Saver：开启 Data Saver 后，后台应用将无法使用移动网络。<br>通知分组：应用的多条通知信息折叠显示。<br>快速切换应用：双击应用切换按钮即可在最近两个应用之间切换。<br>Daydream：系统各层高度优化的全新 VR 平台，包括手机、头戴设备和控制器，今年晚些时候揭晓。<br>Vulkan API：新的 3D 高性能、跨平台图形 API 。<br>新的 JIT/AOT 编译器 ：改进性能、更快安装、更少存储占用。<br>Direct Reply：通知栏直接回复，而不用打开应用。<br>更多安全特性：文件级别的加密、在开机解锁前即可运行的 Direct Boot 功能、借鉴 ChromeOS 的系统平滑升级。</p>
<p>更多 Android 7.0 特性：<a href="https://www.android.com/versions/nougat-7-0/" target="_blank" rel="external">https://www.android.com/versions/nougat-7-0/</a><br>开发者资源：<a href="https://developer.android.com/about/versions/nougat/" target="_blank" rel="external">https://developer.android.com/about/versions/nougat/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天 Google 宣布推出 Android 7.0 Nougat 的最终版，Nexus 设备将第一时间获得更新。同时 7.0 源码也已提交给 Android Open Source Project (AOSP) ，这意味着整个 Android 生态系统获得了最新 Andr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android-使用JsBridge来优化js与本地的交互</title>
    <link href="http://yoursite.com/2016/08/22/JsBridge/"/>
    <id>http://yoursite.com/2016/08/22/JsBridge/</id>
    <published>2016-08-22T15:11:23.000Z</published>
    <updated>2016-08-22T15:12:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JsBridge"><a href="#JsBridge" class="headerlink" title="JsBridge"></a>JsBridge</h1><p>基于<a href="https://github.com/lzyzsd/JsBridge" target="_blank" rel="external">https://github.com/lzyzsd/JsBridge</a> 优化改进而来的Android JsBridge</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>1.支持自定义桥名；<br>2.修复web页未渲染即进行跳转导致Js桥初始化失败的问题；</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>添加maven依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.hjhrq1991.library&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;jsbridge&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.0.5&lt;/version&gt;</div><div class="line">&lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>添加gradle依赖</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.hjhrq1991.library:jsbridge:1.0.5'</span></div></pre></td></tr></table></figure>
<p>在你的布局上添加BridgeWebView</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">com.github.lzyzsd.jsbridge.BridgeWebView</span></span></div><div class="line"><span class="attr">android:id</span>=<span class="string">"@+id/webView"</span></div><div class="line"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="使用默认桥名或自定义桥名"><a href="#使用默认桥名或自定义桥名" class="headerlink" title="使用默认桥名或自定义桥名"></a>使用默认桥名或自定义桥名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//description：如需使用自定义桥名，调用以下方法即可，</span></div><div class="line"><span class="comment">// 传空或不调用setCustom方法即使用默认桥名。</span></div><div class="line"><span class="comment">// 默认桥名：WebViewJavascriptBridge</span></div><div class="line">webView.setCustom(<span class="string">"TestJavascriptBridge"</span>);</div></pre></td></tr></table></figure>
<h3 id="Android上使用方法"><a href="#Android上使用方法" class="headerlink" title="Android上使用方法"></a>Android上使用方法</h3><p>注册一个handler方法供Js调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">webView.registerHandler(<span class="string">"initSignNetPay"</span>, <span class="keyword">new</span> BridgeHandler() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</div><div class="line">Log.i(TAG, <span class="string">"回传结果："</span> + data);</div><div class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Java里调用Js里的handler方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">webView.callHandler(<span class="string">"click1"</span>, <span class="string">"success"</span>, <span class="keyword">new</span> CallBackFunction() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">Log.i(TAG, <span class="string">"回传结果："</span> + data);</div><div class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用默认handler方法来进行交互</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">webView.setDefaultHandler(<span class="keyword">new</span> DefaultHandler());</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.send(</div><div class="line">data, <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</div><div class="line">&#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="JavaScript上使用方法"><a href="#JavaScript上使用方法" class="headerlink" title="JavaScript上使用方法"></a>JavaScript上使用方法</h3><p>构建桥连接</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> default_data = &#123;</div><div class="line">error: <span class="string">"1"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> connectMerchantJSBridge = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</div><div class="line">callback(WebViewJavascriptBridge);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"WebViewJavascriptBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">callback(WebViewJavascriptBridge);</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cmbMerchantBridge = &#123;</div><div class="line">initSignNet: <span class="function"><span class="keyword">function</span> (<span class="params">payData,name</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (!payData) &#123;</div><div class="line">payData = default_data;</div><div class="line">&#125;</div><div class="line">connectMerchantJSBridge(<span class="function"><span class="keyword">function</span> (<span class="params">bridge</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> bridge === <span class="string">"undefined"</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">bridge.callHandler(name, <span class="built_in">JSON</span>.stringify(payData));</div><div class="line">&#125;);</div><div class="line">&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<p>调用Android上的handler方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">click1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> objData = <span class="keyword">new</span> datas();</div><div class="line"><span class="keyword">var</span> payData = objData.click1;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">cmbMerchantBridge.initSignNet(payData, <span class="string">"initSignNetPay"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript里注册一个handler方法供Android调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*app native调用本页面方法*/</span></div><div class="line">connectMerchantJSBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</div><div class="line">bridge.init(<span class="function"><span class="keyword">function</span>(<span class="params">message, responseCallback</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">bridge.registerHandler(<span class="string">"click1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</div><div class="line">responseCallback(<span class="string">"receive click1"</span>);</div><div class="line"><span class="comment">//可以在下面执行操作</span></div><div class="line">&#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.cmbMerchantBridge = cmbMerchantBridge;</div></pre></td></tr></table></figure>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the terms of the MIT license.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JsBridge&quot;&gt;&lt;a href=&quot;#JsBridge&quot; class=&quot;headerlink&quot; title=&quot;JsBridge&quot;&gt;&lt;/a&gt;JsBridge&lt;/h1&gt;&lt;p&gt;基于&lt;a href=&quot;https://github.com/lzyzsd/JsBridge&quot;
    
    </summary>
    
    
  </entry>
  
</feed>
